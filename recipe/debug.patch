diff --git a/python/dolfinx/io/gmshio.py b/python/dolfinx/io/gmshio.py
index 1053923279..279def4e24 100644
--- a/python/dolfinx/io/gmshio.py
+++ b/python/dolfinx/io/gmshio.py
@@ -238,37 +238,47 @@ def model_to_mesh(
         creation for efficient access.
 
     """
+    print("model2mesh")
+    print("rank", comm.rank, rank)
     if comm.rank == rank:
+        print("debug rank")
         assert model is not None, "Gmsh model is None on rank responsible for mesh creation."
         # Get mesh geometry and mesh topology for each element
         x = extract_geometry(model)
         topologies = extract_topology_and_markers(model)
+        print("extract", topologies)
 
         # Extract Gmsh cell id, dimension of cell and number of nodes to
         # cell for each
         num_cell_types = len(topologies.keys())
         cell_information = dict()
         cell_dimensions = np.zeros(num_cell_types, dtype=np.int32)
+        print("cell dimesions")
         for i, element in enumerate(topologies.keys()):
             _, dim, _, num_nodes, _, _ = model.mesh.getElementProperties(element)
             cell_information[i] = {"id": element, "dim": dim, "num_nodes": num_nodes}
             cell_dimensions[i] = dim
 
         # Sort elements by ascending dimension
+        print("arg sort")
         perm_sort = np.argsort(cell_dimensions)
 
         # Broadcast cell type data and geometric dimension
         cell_id = cell_information[perm_sort[-1]]["id"]
         tdim = cell_information[perm_sort[-1]]["dim"]
         num_nodes = cell_information[perm_sort[-1]]["num_nodes"]
+        print("bcast", cell_id, num_nodes)
         cell_id, num_nodes = comm.bcast([cell_id, num_nodes], root=rank)
+        print("bcasted")
 
         # Check for facet data and broadcast relevant info if True
         has_facet_data = False
         if tdim - 1 in cell_dimensions:
             has_facet_data = True
-
+        
+        print("bcast facet", has_facet_data)
         has_facet_data = comm.bcast(has_facet_data, root=rank)
+        print("bcasted", has_facet_data)
         if has_facet_data:
             num_facet_nodes = comm.bcast(cell_information[perm_sort[-2]]["num_nodes"], root=rank)
             gmsh_facet_id = cell_information[perm_sort[-2]]["id"]
@@ -288,15 +298,18 @@ def model_to_mesh(
             facet_values = np.empty((0,), dtype=np.int32)
 
     # Create distributed mesh
+    print("ufl_mesh")
     ufl_domain = ufl_mesh(cell_id, gdim, dtype=dtype)
     gmsh_cell_perm = cell_perm_array(_cpp.mesh.to_type(str(ufl_domain.ufl_cell())), num_nodes)
     cells = cells[:, gmsh_cell_perm].copy()
     mesh = create_mesh(comm, cells, x[:, :gdim].astype(dtype, copy=False), ufl_domain, partitioner)
+    print("has mesh")
 
     # Create MeshTags for cells
     local_entities, local_values = distribute_entity_data(
         mesh, mesh.topology.dim, cells, cell_values
     )
+    print("distributed")
     mesh.topology.create_connectivity(mesh.topology.dim, 0)
     adj = _cpp.graph.AdjacencyList_int32(local_entities)
     ct = meshtags_from_entities(
@@ -307,6 +320,8 @@ def model_to_mesh(
     # Create MeshTags for facets
     topology = mesh.topology
     tdim = topology.dim
+
+    print("mesh tags")
     if has_facet_data:
         # Permute facets from MSH to DOLFINx ordering
         # FIXME: This does not work for prism meshes
@@ -316,19 +331,23 @@ def model_to_mesh(
         facet_type = _cpp.mesh.cell_entity_type(
             _cpp.mesh.to_type(str(ufl_domain.ufl_cell())), tdim - 1, 0
         )
+        print("facet_type", facet_type)
         gmsh_facet_perm = cell_perm_array(facet_type, num_facet_nodes)
         marked_facets = marked_facets[:, gmsh_facet_perm]
 
         local_entities, local_values = distribute_entity_data(
             mesh, tdim - 1, marked_facets, facet_values
         )
+        print("local_entities", local_entities)
         mesh.topology.create_connectivity(topology.dim - 1, tdim)
         adj = _cpp.graph.AdjacencyList_int32(local_entities)
+        print("meshtags")
         ft = meshtags_from_entities(mesh, tdim - 1, adj, local_values.astype(np.int32, copy=False))
         ft.name = "Facet tags"
     else:
         ft = meshtags(mesh, tdim - 1, np.empty(0, dtype=np.int32), np.empty(0, dtype=np.int32))
 
+    print("returning")
     return (mesh, ct, ft)
 
 
