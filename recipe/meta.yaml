{% set name = "fenics-dolfinx" %}
{% set version = "0.8.0" %}
{% set extra = "" %}

# pins are usually updated on minor bumps:
# basix is currently co-versioned with ffcx
{% set major_minor = version.rsplit(".", 1)[0] %}
{% set ufl_version = "2024.1" %}

{% set build = 0 %}
{% if scalar == "real" %}
{%   set build = build + 100 %}
{% endif %}

package:
  name: {{ name|lower }}-split
  version: {{ version }}

source:
  url: https://github.com/fenics/dolfinx/archive/refs/tags/v{{ version }}{{ extra }}.tar.gz
  sha256: acf3104d9ecc0380677a6faf69eabfafc58d0cce43f7777e1307b95701c7cad9
  patches:
    - unused-variable.patch
    - 3180.patch

build:
  number: {{ build }}
  skip: true  # [win or py<39]
  script_env:
    - OMPI_ALLOW_RUN_AS_ROOT=1
    - OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
    - OMPI_MCA_rmaps_base_oversubscribe=1
    - OMPI_MCA_plm=isolated
    - OMPI_MCA_btl=tcp,self
    - OMPI_MCA_btl_vader_single_copy_mechanism=none
  force_use_keys:
    # separate builds for each Python
    # this duplicates libdolfinx outputs, but results in faster builds
    - python

outputs:
  - name: fenics-libdolfinx
    build:
      script: bash -ex ${RECIPE_DIR}/build-libdolfinx.sh
      skip_compile_pyc:
        - '*'  # [build_platform != target_platform]
      run_exports:
        - {{ pin_subpackage("fenics-libdolfinx", max_pin="x.x.x") }}
        - petsc * {{ scalar }}_*
      ignore_run_exports_from:
        - python
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
      force_use_keys:
        - python
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ stdlib("c") }}
        - {{ compiler("cxx") }}
        - cmake
        - make
        - pkg-config
        - {{ mpi }}  # [mpi == 'openmpi' and build_platform != target_platform]
        # python is unconditionally used to check for basix
        # even if it doesn't find it, dolfinx doesn't handle python itself being unavailable
        - python
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
      host:
        - python
        - {{ mpi }}
        - libadios2
        - libadios2 * mpi_{{ mpi }}_*
        - kahip
        - libboost-devel
        - hdf5 {{ hdf5 }} mpi_{{ mpi }}_*
        - parmetis
        - libscotch {{ scotch }}
        - libptscotch {{ scotch }}
        - petsc
        - petsc * {{ scalar }}_*
        - pugixml
        - slepc
        - fenics-libbasix {{ major_minor }}.*
        - fenics-ufcx {{ major_minor }}.*
      run:
        # host dependencies with run_exports
        - {{ mpi }}
        - hdf5
        - kahip
        - libscotch
        - libptscotch
        - petsc * {{ scalar }}_*
        - slepc
        - fenics-libbasix
        # these don't have run_exports
        # but are needed at runtime for code generation
        - fenics-ufcx  {{ major_minor }}.*
        - parmetis
        # needs boost metadata just to CMake-load fenix-libdolfinx
        - libboost-devel
    test:
      script: test-libdolfinx.sh
      source_files:
        - cpp/test
      requires:
        - {{ compiler("cxx") }}
        - pkg-config
        - cmake
        - catch2 3.*
        - make
        - fenics-ffcx {{ major_minor }}.*
  - name: fenics-dolfinx
    build:
      script: bash -ex ${RECIPE_DIR}/build-dolfinx.sh
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ stdlib("c") }}
        - {{ compiler("cxx") }}
        - cmake
        - make
        - pkg-config
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - nanobind                               # [build_platform != target_platform]
        - {{ mpi }}  # [mpi == 'openmpi' and build_platform != target_platform]
      host:
        - {{ mpi }}
        # hdf5 shouldn't be needed here, but solver fails without it
        - hdf5 {{ hdf5 }} mpi_{{ mpi }}_*
        - {{ pin_subpackage("fenics-libdolfinx", exact=True) }}
        - kahip-python
        - python
        - pip
        - scikit-build-core
        - wheel
        - nanobind
        - fenics-basix {{ major_minor }}.*
        - mpi4py
        - petsc * {{ scalar }}_*
        - petsc4py
        - slepc
        - slepc4py
      run_constrained:
        - {{ pin_compatible("nanobind", max_pin="x.x") }}
      run:
        # we shouldn't need to depend on compiler version,
        # but pybind11 includes compiler version in the ABI
        - {{ compiler("cxx") }}
        - pkg-config
        - python
        - {{ pin_subpackage("fenics-libdolfinx", exact=True) }}
        - cffi
        - kahip-python
        - mpi4py
        - numpy >=1.21
        - petsc4py
        - slepc4py
        - fenics-basix {{ major_minor }}.*
        - fenics-ffcx {{ major_minor }}.*
        - fenics-ufl {{ ufl_version }}.*
    test:
      script: test-dolfinx.sh
      files:
        - test_dolfinx.py
      source_files:
        - python/demo
        - python/test
      requires:
        - pip
        - pytest >=6
        - python-gmsh
        # linux-aarch64 getting old gmsh with missing cairo
        # unclear what pin is holding it back
        - cairo  # [linux and aarch64]
        - sympy
        - scipy
        - matplotlib

about:
  home: https://fenicsproject.org
  summary: The computational environment of FEniCSx
  description: |
    DOLFINx is the computational environment of FEniCSx
    and implements the FEniCS Problem Solving Environment in Python and C++.
  license: LGPL-3.0-or-later
  license_family: LGPL
  license_file: COPYING.LESSER
  doc_url: https://docs.fenicsproject.org/dolfinx/v{{ version }}/
  dev_url: https://github.com/fenics/dolfinx

extra:
  feedstock-name: fenics-dolfinx
  recipe-maintainers:
    - minrk
